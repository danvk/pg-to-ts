// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Integration tests Schema generation Basic generation 1`] = `
"/* tslint:disable */
/* eslint-disable */


export type Json = unknown;
export type format_enum = 'html' | 'markdown' | 'text';
export type user_status_enum = 'active' | 'confirmed' | 'deleted' | 'pending' | 'suspended';

// Table users
export interface Users {
  email: string;
  id: number;
  pass_crypt: string;
  creation_time: Date;
  display_name: string;
  data_public: boolean;
  description: string;
  home_lat: number | null;
  home_lon: number | null;
  home_zoom: number | null;
  nearby: number | null;
  pass_salt: string | null;
  image_file_name: string | null;
  email_valid: boolean;
  new_email: string | null;
  creation_ip: string | null;
  languages: string | null;
  status: user_status_enum;
  terms_agreed: Date | null;
  consider_pd: boolean;
  preferred_editor: string | null;
  terms_seen: boolean;
  auth_uid: string | null;
  description_format: format_enum;
  image_fingerprint: string | null;
  changesets_count: number;
  traces_count: number;
  diary_entries_count: number;
  image_use_gravatar: boolean;
  image_content_type: string | null;
  auth_provider: string | null;
  uuid_column: string | null;
  number: number | null;
  string: string | null;
  money_col: number | null;
  char_col: string | null;
  time_col: string | null;
  inet_col: string | null;
  jsonb_col: Json | null;
  numeric_col: number | null;
  bytea_col: string | null;
  bool_array_col: boolean[] | null;
  varchar_array_col: string[] | null;
  int2_array_col: number[] | null;
  int4_array_col: number[] | null;
  int8_array_col: number[] | null;
  uuid_array_col: string[] | null;
  text_array_col: string[] | null;
  bytea_array_col: string[] | null;
  real_col: number | null;
  double_col: number | null;
  time_with_tz: string | null;
  oid_col: number | null;
  interval_col: string | null;
  json_col: Json | null;
  date_col: Date | null;
  unspported_path_type: any | null;
  name_type_col: string | null;
  json_array_col: Json[] | null;
  jsonb_array_col: Json[] | null;
  timestamptz_array_col: Date[] | null;
}
export interface UsersInput {
  email: string;
  id: number;
  pass_crypt: string;
  creation_time: Date;
  display_name?: string;
  data_public?: boolean;
  description?: string;
  home_lat?: number | null;
  home_lon?: number | null;
  home_zoom?: number | null;
  nearby?: number | null;
  pass_salt?: string | null;
  image_file_name?: string | null;
  email_valid?: boolean;
  new_email?: string | null;
  creation_ip?: string | null;
  languages?: string | null;
  status?: user_status_enum;
  terms_agreed?: Date | null;
  consider_pd?: boolean;
  preferred_editor?: string | null;
  terms_seen?: boolean;
  auth_uid?: string | null;
  description_format?: format_enum;
  image_fingerprint?: string | null;
  changesets_count?: number;
  traces_count?: number;
  diary_entries_count?: number;
  image_use_gravatar?: boolean;
  image_content_type?: string | null;
  auth_provider?: string | null;
  uuid_column?: string | null;
  number?: number | null;
  string?: string | null;
  money_col?: number | null;
  char_col?: string | null;
  time_col?: string | null;
  inet_col?: string | null;
  jsonb_col?: Json | null;
  numeric_col?: number | null;
  bytea_col?: string | null;
  bool_array_col?: boolean[] | null;
  varchar_array_col?: string[] | null;
  int2_array_col?: number[] | null;
  int4_array_col?: number[] | null;
  int8_array_col?: number[] | null;
  uuid_array_col?: string[] | null;
  text_array_col?: string[] | null;
  bytea_array_col?: string[] | null;
  real_col?: number | null;
  double_col?: number | null;
  time_with_tz?: string | null;
  oid_col?: number | null;
  interval_col?: string | null;
  json_col?: Json | null;
  date_col?: Date | null;
  unspported_path_type?: any | null;
  name_type_col?: string | null;
  json_array_col?: Json[] | null;
  jsonb_array_col?: Json[] | null;
  timestamptz_array_col?: Date[] | null;
}
const users = {
  tableName: 'users',
  columns: ['email', 'id', 'pass_crypt', 'creation_time', 'display_name', 'data_public', 'description', 'home_lat', 'home_lon', 'home_zoom', 'nearby', 'pass_salt', 'image_file_name', 'email_valid', 'new_email', 'creation_ip', 'languages', 'status', 'terms_agreed', 'consider_pd', 'preferred_editor', 'terms_seen', 'auth_uid', 'description_format', 'image_fingerprint', 'changesets_count', 'traces_count', 'diary_entries_count', 'image_use_gravatar', 'image_content_type', 'auth_provider', 'uuid_column', 'number', 'string', 'money_col', 'char_col', 'time_col', 'inet_col', 'jsonb_col', 'numeric_col', 'bytea_col', 'bool_array_col', 'varchar_array_col', 'int2_array_col', 'int4_array_col', 'int8_array_col', 'uuid_array_col', 'text_array_col', 'bytea_array_col', 'real_col', 'double_col', 'time_with_tz', 'oid_col', 'interval_col', 'json_col', 'date_col', 'unspported_path_type', 'name_type_col', 'json_array_col', 'jsonb_array_col', 'timestamptz_array_col'],
  requiredForInsert: ['email', 'id', 'pass_crypt', 'creation_time'],
  primaryKey: null,
  foreignKeys: {},
} as const;


export interface TableTypes {
  users: {
    select: Users;
    input: UsersInput;
  };
}

export const tables = {
  users,
}
"
`;

exports[`Integration tests Schema generation Camelcase generation 1`] = `
"/* tslint:disable */
/* eslint-disable */


export type Json = unknown;
export type FormatEnum = 'html' | 'markdown' | 'text';
export type UserStatusEnum = 'active' | 'confirmed' | 'deleted' | 'pending' | 'suspended';

// Table users
export interface Users {
  email: string;
  id: number;
  passCrypt: string;
  creationTime: Date;
  displayName: string;
  dataPublic: boolean;
  description: string;
  homeLat: number | null;
  homeLon: number | null;
  homeZoom: number | null;
  nearby: number | null;
  passSalt: string | null;
  imageFileName: string | null;
  emailValid: boolean;
  newEmail: string | null;
  creationIp: string | null;
  languages: string | null;
  status: UserStatusEnum;
  termsAgreed: Date | null;
  considerPd: boolean;
  preferredEditor: string | null;
  termsSeen: boolean;
  authUid: string | null;
  descriptionFormat: FormatEnum;
  imageFingerprint: string | null;
  changesetsCount: number;
  tracesCount: number;
  diaryEntriesCount: number;
  imageUseGravatar: boolean;
  imageContentType: string | null;
  authProvider: string | null;
  uuidColumn: string | null;
  number: number | null;
  string: string | null;
  moneyCol: number | null;
  charCol: string | null;
  timeCol: string | null;
  inetCol: string | null;
  jsonbCol: Json | null;
  numericCol: number | null;
  byteaCol: string | null;
  boolArrayCol: boolean[] | null;
  varcharArrayCol: string[] | null;
  int2ArrayCol: number[] | null;
  int4ArrayCol: number[] | null;
  int8ArrayCol: number[] | null;
  uuidArrayCol: string[] | null;
  textArrayCol: string[] | null;
  byteaArrayCol: string[] | null;
  realCol: number | null;
  doubleCol: number | null;
  timeWithTz: string | null;
  oidCol: number | null;
  intervalCol: string | null;
  jsonCol: Json | null;
  dateCol: Date | null;
  unspportedPathType: any | null;
  nameTypeCol: string | null;
  jsonArrayCol: Json[] | null;
  jsonbArrayCol: Json[] | null;
  timestamptzArrayCol: Date[] | null;
}
export interface UsersInput {
  email: string;
  id: number;
  passCrypt: string;
  creationTime: Date;
  displayName?: string;
  dataPublic?: boolean;
  description?: string;
  homeLat?: number | null;
  homeLon?: number | null;
  homeZoom?: number | null;
  nearby?: number | null;
  passSalt?: string | null;
  imageFileName?: string | null;
  emailValid?: boolean;
  newEmail?: string | null;
  creationIp?: string | null;
  languages?: string | null;
  status?: UserStatusEnum;
  termsAgreed?: Date | null;
  considerPd?: boolean;
  preferredEditor?: string | null;
  termsSeen?: boolean;
  authUid?: string | null;
  descriptionFormat?: FormatEnum;
  imageFingerprint?: string | null;
  changesetsCount?: number;
  tracesCount?: number;
  diaryEntriesCount?: number;
  imageUseGravatar?: boolean;
  imageContentType?: string | null;
  authProvider?: string | null;
  uuidColumn?: string | null;
  number?: number | null;
  string?: string | null;
  moneyCol?: number | null;
  charCol?: string | null;
  timeCol?: string | null;
  inetCol?: string | null;
  jsonbCol?: Json | null;
  numericCol?: number | null;
  byteaCol?: string | null;
  boolArrayCol?: boolean[] | null;
  varcharArrayCol?: string[] | null;
  int2ArrayCol?: number[] | null;
  int4ArrayCol?: number[] | null;
  int8ArrayCol?: number[] | null;
  uuidArrayCol?: string[] | null;
  textArrayCol?: string[] | null;
  byteaArrayCol?: string[] | null;
  realCol?: number | null;
  doubleCol?: number | null;
  timeWithTz?: string | null;
  oidCol?: number | null;
  intervalCol?: string | null;
  jsonCol?: Json | null;
  dateCol?: Date | null;
  unspportedPathType?: any | null;
  nameTypeCol?: string | null;
  jsonArrayCol?: Json[] | null;
  jsonbArrayCol?: Json[] | null;
  timestamptzArrayCol?: Date[] | null;
}
const users = {
  tableName: 'users',
  columns: ['email', 'id', 'passCrypt', 'creationTime', 'displayName', 'dataPublic', 'description', 'homeLat', 'homeLon', 'homeZoom', 'nearby', 'passSalt', 'imageFileName', 'emailValid', 'newEmail', 'creationIp', 'languages', 'status', 'termsAgreed', 'considerPd', 'preferredEditor', 'termsSeen', 'authUid', 'descriptionFormat', 'imageFingerprint', 'changesetsCount', 'tracesCount', 'diaryEntriesCount', 'imageUseGravatar', 'imageContentType', 'authProvider', 'uuidColumn', 'number', 'string', 'moneyCol', 'charCol', 'timeCol', 'inetCol', 'jsonbCol', 'numericCol', 'byteaCol', 'boolArrayCol', 'varcharArrayCol', 'int2ArrayCol', 'int4ArrayCol', 'int8ArrayCol', 'uuidArrayCol', 'textArrayCol', 'byteaArrayCol', 'realCol', 'doubleCol', 'timeWithTz', 'oidCol', 'intervalCol', 'jsonCol', 'dateCol', 'unspportedPathType', 'nameTypeCol', 'jsonArrayCol', 'jsonbArrayCol', 'timestamptzArrayCol'],
  requiredForInsert: ['email', 'id', 'passCrypt', 'creationTime'],
  primaryKey: null,
  foreignKeys: {},
} as const;


export interface TableTypes {
  users: {
    select: Users;
    input: UsersInput;
  };
}

export const tables = {
  users,
}
"
`;

exports[`Integration tests Schema generation pg-to-sql features 1`] = `
"/* tslint:disable */
/* eslint-disable */

import { CommentMetadata } from \\"./pg-to-ts-json-types\\";


export type Json = unknown;
export type comment_status_enum = 'archived' | 'complete' | 'deleted' | 'pending';

// Table comment
/** Variant-level comments */
export interface Comment {
  id: string;
  doc_id: string;
  author_id: string;
  created_at: string | null;
  modified_at: string | null;
  /** Additional comment info @type {CommentMetadata} */
  metadata: CommentMetadata | null;
  /** Content of the comment, formatted with Markdown. May contain @mentions. */
  content_md: string;
  /** List of statuses; Just an array for testing! */
  statuses: comment_status_enum[] | null;
}
/** Variant-level comments */
export interface CommentInput {
  id?: string;
  doc_id: string;
  author_id: string;
  created_at?: string | null;
  modified_at?: string | null;
  /** Additional comment info @type {CommentMetadata} */
  metadata?: CommentMetadata | null;
  /** Content of the comment, formatted with Markdown. May contain @mentions. */
  content_md: string;
  /** List of statuses; Just an array for testing! */
  statuses?: comment_status_enum[] | null;
}
const comment = {
  tableName: 'comment',
  columns: ['id', 'doc_id', 'author_id', 'created_at', 'modified_at', 'metadata', 'content_md', 'statuses'],
  requiredForInsert: ['doc_id', 'author_id', 'content_md'],
  primaryKey: 'id',
  foreignKeys: {
    doc_id: { table: 'doc', column: 'id' },
    author_id: { table: 'users', column: 'id' },
  },
} as const;

// Table doc
export interface Doc {
  id: string;
  created_by: string;
  title: string | null;
  contents: string | null;
}
export interface DocInput {
  id?: string;
  created_by: string;
  title?: string | null;
  contents?: string | null;
}
const doc = {
  tableName: 'doc',
  columns: ['id', 'created_by', 'title', 'contents'],
  requiredForInsert: ['created_by'],
  primaryKey: 'id',
  foreignKeys: { created_by: { table: 'users', column: 'id' }, },
} as const;

// Table table_with_underscores
export interface TableWithUnderscores {
  column_with_underscores: string;
}
export interface TableWithUnderscoresInput {
  column_with_underscores: string;
}
const table_with_underscores = {
  tableName: 'table_with_underscores',
  columns: ['column_with_underscores'],
  requiredForInsert: ['column_with_underscores'],
  primaryKey: null,
  foreignKeys: {},
} as const;

// Table users
export interface Users {
  id: string;
  name: string;
  pronoun: string | null;
}
export interface UsersInput {
  id?: string;
  name: string;
  pronoun?: string | null;
}
const users = {
  tableName: 'users',
  columns: ['id', 'name', 'pronoun'],
  requiredForInsert: ['name'],
  primaryKey: 'id',
  foreignKeys: {},
} as const;


export interface TableTypes {
  comment: {
    select: Comment;
    input: CommentInput;
  };
  doc: {
    select: Doc;
    input: DocInput;
  };
  table_with_underscores: {
    select: TableWithUnderscores;
    input: TableWithUnderscoresInput;
  };
  users: {
    select: Users;
    input: UsersInput;
  };
}

export const tables = {
  comment,
  doc,
  table_with_underscores,
  users,
}
"
`;

exports[`Integration tests Schema generation prefixWithSchemaNames generation 1`] = `
"/* tslint:disable */
/* eslint-disable */


export type Json = unknown;
export type comment_status_enum = 'archived' | 'complete' | 'deleted' | 'pending';

// Table public.users
export interface PublicUsers {
  id: string;
  name: string;
  pronoun: string | null;
}
export interface PublicUsersInput {
  id?: string;
  name: string;
  pronoun?: string | null;
}
const public_users = {
  tableName: 'public.users',
  columns: ['id', 'name', 'pronoun'],
  requiredForInsert: ['name'],
  primaryKey: 'id',
  foreignKeys: {},
} as const;


export interface TableTypes {
  public_users: {
    select: PublicUsers;
    input: PublicUsersInput;
  };
}

export const tables = {
  public_users,
}
"
`;
